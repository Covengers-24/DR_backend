<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dr.mapper.myPage.MyPageMapper">
    <!--  자기 자신 정보 확인(내정보) -->
    <select id="getUserInfo" parameterType="Long" resultType="UserInfoDTO">
        SELECT
            U.USER_NICKNAME AS USER_NICKNAME,
            U.USER_EMAIL AS USER_EMAIL,
            U.USER_PHONE AS USER_PHONE,
            NVL(S.ENVIRONMENT_SCORE, 0) AS ENVIRONMENT_SCORE,
            NVL(R.ENVIRONMENT_RANK, 0) AS ENVIRONMENT_RANK,
            NVL(P.TOTAL_POINTS, 0) AS TOTAL_POINTS,
            PH.PHOTO_LOCAL AS PHOTO
        FROM
            DR_USER U
                LEFT JOIN
            (SELECT
                 USER_NUMBER,
                 SUM(SCORE_GET) AS ENVIRONMENT_SCORE
             FROM
                 DR_SCORE
             GROUP BY USER_NUMBER) S ON U.USER_NUMBER = S.USER_NUMBER
                LEFT JOIN
            (SELECT
                 USER_NUMBER,
                 DENSE_RANK() OVER (ORDER BY SUM(SCORE_GET) DESC) AS ENVIRONMENT_RANK
             FROM
                 DR_SCORE
             GROUP BY USER_NUMBER) R ON U.USER_NUMBER = R.USER_NUMBER
                LEFT JOIN
            (SELECT
                 USER_NUMBER,
                 SUM(POINT_GET - POINT_USE) AS TOTAL_POINTS
             FROM
                 DR_POINT
             GROUP BY USER_NUMBER) P ON U.USER_NUMBER = P.USER_NUMBER
                LEFT JOIN
            (SELECT
                 USER_NUMBER,
                 PHOTO_LOCAL
             FROM
                 DR_PHOTO
             WHERE
                 PHOTO_LOCAL IS NOT NULL
            ) PH ON U.USER_NUMBER = PH.USER_NUMBER
        WHERE
            U.USER_NUMBER = #{userNumber}
    </select>

    <!--  회원 탈퇴 -->
    <delete id="deleteUser" parameterType="Long">
        DELETE FROM DR_USER
        WHERE USER_NUMBER = #{userNumber}
    </delete>

    <!--  내정보 포인트 내역 확인 -->
    <select id="pointHistory" parameterType="Long" resultType="PointDetailDTO">
        <![CDATA[
        SELECT DP.POINT_NUMBER, DP.POINT_NOTE,
        CASE WHEN DP.POINT_NOTE IN ('관리자회수', '상품구매') THEN -DP.POINT_USE
        ELSE DP.POINT_GET END AS pointGet,
        DP.POINT_DATE AS pointDate,
        COALESCE((SELECT SUM(
        CASE
        WHEN DP2.POINT_NOTE IN ('신규가입', '출석체크', '랭킹', '개근') THEN DP2.POINT_GET
        WHEN DP2.POINT_NOTE IN ('관리자회수', '상품구매') THEN -DP2.POINT_USE
        ELSE 0
        END)
        FROM DR_POINT DP2
        WHERE DP2.USER_NUMBER = DP.USER_NUMBER
        AND DP2.POINT_DATE <= DP.POINT_DATE), 0) AS totalPoints
        FROM DR_POINT DP
        WHERE DP.USER_NUMBER = #{userNumber}
        ORDER BY DP.POINT_DATE DESC
        ]]>
    </select>

    <!--  내정보 내가 쓴 레시피 목록 -->
    <select id="getUserRecipe" parameterType="Long" resultType="UserRecipeDTO">
        SELECT
            P.RECIPE_PHOTO,
            R.RECIPE_TITLE,
            TO_CHAR(R.RECIPE_WRITE_DATE, 'YYYY-MM-DD') AS RECIPE_WRITE_DATE, -- 날짜 형식 변환
            (SELECT COUNT(*)
             FROM DR_GOOD G
             WHERE G.RECIPE_NUMBER = R.RECIPE_NUMBER) AS GOOD_COUNT
        FROM
            DR_RECIPE R
                LEFT JOIN (
                SELECT
                    PHOTO_LOCAL AS RECIPE_PHOTO,
                    RECIPE_NUMBER,
                    ROW_NUMBER() OVER (PARTITION BY RECIPE_NUMBER ORDER BY PHOTO_NUMBER) AS RN
                FROM
                    DR_PHOTO
            ) P ON R.RECIPE_NUMBER = P.RECIPE_NUMBER AND P.RN = 1
        WHERE
            R.USER_NUMBER = #{userNumber}
        ORDER BY
            R.RECIPE_WRITE_DATE DESC
    </select>

    <!-- 내정보 내가 쓴 게시글 목록 -->
    <select id="getUserPost" parameterType="Long" resultType="UserPostDTO">
        SELECT
            ROW_NUMBER() OVER (ORDER BY B.BOARD_WRITE_DATE DESC) AS MY_POST_SEQ,
            B.BOARD_TITLE AS MY_POST_TITLE,
            B.BOARD_TYPE AS MY_POST_TYPE,
            NVL(GOOD_COUNT.LIKES, 0) AS MY_POSTGOOD_COUNT,
            TO_CHAR(B.BOARD_WRITE_DATE, 'YYYY-MM-DD') AS MY_POST_WRITE_DATE
        FROM DR_BOARD B
        LEFT JOIN (
            SELECT
                 BOARD_NUMBER, COUNT(*) AS LIKES
        FROM DR_GOOD
        GROUP BY BOARD_NUMBER
        ) GOOD_COUNT ON B.BOARD_NUMBER = GOOD_COUNT.BOARD_NUMBER
        WHERE B.USER_NUMBER = #{userNumber}
        ORDER BY B.BOARD_WRITE_DATE DESC
    </select>

    <!-- 내정보 찜 목록 -->
    <select id="getUserSteam" parameterType="Long" resultType="UserSteamDTO">
        SELECT
        R.RECIPE_TITLE,               -- 레시피 제목
        U.USER_NICKNAME,              -- 작성자 닉네임
        P.PHOTO_LOCAL                 -- 레시피 사진
        FROM
        DR_STEAM S
        JOIN
        DR_RECIPE R ON S.RECIPE_NUMBER = R.RECIPE_NUMBER
        JOIN
        DR_USER U ON R.USER_NUMBER = U.USER_NUMBER
        LEFT JOIN (
        SELECT
        PHOTO_LOCAL,
        RECIPE_NUMBER,
        ROW_NUMBER() OVER (PARTITION BY RECIPE_NUMBER ORDER BY PHOTO_NUMBER) AS RN  -- 사진 번호로 순번 매기기
        FROM
        DR_PHOTO
        ) P ON R.RECIPE_NUMBER = P.RECIPE_NUMBER AND P.RN = 1  -- 첫 번째 사진만 가져오기
        WHERE
        S.USER_NUMBER = #{userNumber}
        ORDER BY
        S.STEAM_DATE DESC              <!-- 찜한 날짜 기준 최신순 정렬 -->
    </select>

    <!-- 내정보 찜 삭제 -->
    <select id="getSteamDelete" parameterType="Long" resultType="UserSteamDTO">
        DELETE FROM DR_STEAM
        WHERE USER_NUMBER = #{userNumber}
        AND RECIPE_NUMBER = #{recipeNumber}
    </select>



</mapper>