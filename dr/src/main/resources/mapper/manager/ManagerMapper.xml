<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dr.mapper.manager.ManagerMapper">

    <!-- 1. 관리자 로그인-->
    <select id="managerLogin" resultType="ManagerSessionDTO">
        SELECT MANAGER_NAME
        FROM DR_MANAGER
        WHERE MANAGER_EMAIL = #{managerEmail} AND MANAGER_PW = #{managerPw}
    </select>

    <!-- 2-1. 대시보드-->
    <select id="dashBoardInfo" resultType="DashBoardDTO">
        SELECT
                (SELECT COUNT(*) FROM DR_USER) AS userAll,
                (SELECT COUNT(*) FROM DR_SIREN) AS numAll,
                (SELECT COUNT(*) FROM DR_SIREN WHERE SIREN_TYPE = '게시글') AS boardNum,
                (SELECT COUNT(*) FROM DR_SIREN WHERE SIREN_TYPE = '레시피') AS recipeNum,
                (SELECT COUNT(*) FROM DR_SIREN WHERE SIREN_TYPE = '댓글') AS replyNum,
                TO_CHAR(SYSDATE, 'YYYY-MM-DD') AS today FROM DUAL
    </select>


    <!-- 2-2. 관리자 정보-->
    <select id="managerInfo" resultType="ManagerDTO">
        SELECT
            M.MANAGER_NAME AS managerName,
            M.MANAGER_EMAIL AS managerEmail,
            M.MANAGER_SORT AS managerSort
        FROM
            DR_MANAGER M
    </select>

    <!-- 3-1. 회원관리-->
    <select id="manageUser" resultType="ManagerUserDTO">
        SELECT
            U.USER_NUMBER,
            U.USER_NICKNAME,
            U.USER_STATUS,
            U.USER_PHONE,
            U.USER_EMAIL
        FROM
            DR_USER U
        ORDER BY
            U.USER_NUMBER
    </select>

    <!-- 3-2. 회원탈퇴-->
    <delete id="userOut" parameterType="Integer">
        DELETE
        FROM DR_USER U
        WHERE U.USER_NUMBER = #{userNumber}
    </delete>

    <!-- 3-3. 회원정지-->
    <update id="userPause" parameterType="Integer">
        UPDATE DR_USER
        SET USER_STATUS = '7일정지'
        WHERE USER_NUMBER = #{userNumber}
    </update>

    <!-- 3-4. 회원검색-->
    <select id="userSearch" parameterType="int" resultType="ManagerUserDTO">
        SELECT  U.USER_NUMBER,
                U.USER_NICKNAME,
                U.USER_STATUS,
                U.USER_PHONE,
                U.USER_EMAIL
        FROM DR_USER U
        WHERE U.USER_NUMBER = #{userNumber}
    </select>

    <!-- 4-1. 게시판 관리-->
    <select id="showBoard" parameterType="ManagerBoardDTO">
        SELECT
            B.BOARD_NUMBER,
            B.BOARD_TITLE,
            U.USER_NICKNAME,
            COUNT(G.GOOD_NUMBER) AS goodCount,
            B.BOARD_WRITE_DATE,
            B.BOARD_TYPE
        FROM
            DR_BOARD B
                JOIN
            DR_USER U ON B.USER_NUMBER = U.USER_NUMBER
                LEFT JOIN
            DR_GOOD G ON B.BOARD_NUMBER = G.BOARD_NUMBER
        GROUP BY
            B.BOARD_NUMBER, B.BOARD_TITLE, U.USER_NICKNAME, B.BOARD_WRITE_DATE, B.BOARD_TYPE
        ORDER BY
            B.BOARD_WRITE_DATE DESC
    </select>

    <!-- 4-2. 게시판 삭제-->
    <delete id="boardDelete" parameterType="Integer">
        DELETE
        FROM DR_BOARD B
        WHERE B.BOARD_NUMBER = #{boardNumber}
    </delete>

    <!-- 4-3. 게시판 검색-->
    <select id="boardSearch" parameterType="int" resultType="ManagerBoardDTO">
        SELECT
            B.BOARD_NUMBER,
            B.BOARD_TITLE,
            U.USER_NICKNAME,
            COUNT(G.GOOD_NUMBER) AS goodCount,
            B.BOARD_WRITE_DATE,
            B.BOARD_TYPE
        FROM
            DR_BOARD B
                JOIN
            DR_USER U ON B.USER_NUMBER = U.USER_NUMBER
                LEFT JOIN
            DR_GOOD G ON B.BOARD_NUMBER = G.BOARD_NUMBER
        WHERE
            B.BOARD_NUMBER = #{boardNumber}
        GROUP BY
            B.BOARD_NUMBER,
            B.BOARD_TITLE,
            U.USER_NICKNAME,
            B.BOARD_WRITE_DATE,
            B.BOARD_TYPE
    </select>


    <!-- 5-1. 레시피 관리-->
    <select id="showRecipe" parameterType="ManagerRecipeDTO">
        SELECT
            R.RECIPE_NUMBER,
            R.RECIPE_TITLE,
            U.USER_NICKNAME,
            COUNT(G.GOOD_NUMBER) AS goodCount,
            R.RECIPE_WRITE_DATE,
            R.RECIPE_TYPE
        FROM
            DR_RECIPE R
                JOIN
            DR_USER U ON R.USER_NUMBER = U.USER_NUMBER
                LEFT JOIN
            DR_GOOD G ON R.RECIPE_NUMBER = G.RECIPE_NUMBER
        GROUP BY
            R.RECIPE_NUMBER, R.RECIPE_TITLE, U.USER_NICKNAME, R.RECIPE_WRITE_DATE, R.RECIPE_TYPE
        ORDER BY
            R.RECIPE_WRITE_DATE DESC
    </select>

    <!-- 5-2. 레시피 삭제-->
    <delete id="recipeDelete" parameterType="Integer">
        DELETE
        FROM DR_RECIPE R
        WHERE R.RECIPE_NUMBER = #{recipeNumber}
    </delete>

    <!-- 5-3. 레시피 검색-->
    <select id="recipeSearch" parameterType="int" resultType="ManagerRecipeDTO">
        SELECT
            R.RECIPE_NUMBER,
            R.RECIPE_TITLE,
            U.USER_NICKNAME,
            COUNT(G.GOOD_NUMBER) AS goodCount,
            R.RECIPE_WRITE_DATE,
            R.RECIPE_TYPE
        FROM
            DR_RECIPE R
                JOIN
            DR_USER U ON R.USER_NUMBER = U.USER_NUMBER
                LEFT JOIN
            DR_GOOD G ON R.RECIPE_NUMBER = G.RECIPE_NUMBER
        WHERE
            R.RECIPE_NUMBER = #{recipeNumber}
        GROUP BY
            R.RECIPE_NUMBER, R.RECIPE_TITLE, U.USER_NICKNAME, R.RECIPE_WRITE_DATE, R.RECIPE_TYPE

    </select>



    <!-- 6-1. 댓글관리-->
    <select id="showReply" parameterType="ManagerCommentDTO">
        select R.REPLY_NUMBER , R.REPLY_TEXT , U.USER_NICKNAME , U.USER_PHONE , R.REPLY_WRITE_DATE , B.BOARD_NUMBER , RR.RECIPE_NUMBER , B.BOARD_TYPE , RR.RECIPE_TYPE
        from DR_REPLY R
                 JOIN DR_USER U ON R.USER_NUMBER = U.USER_NUMBER
                 LEFT JOIN DR_BOARD B ON R.BOARD_NUMBER = B.BOARD_NUMBER
                 LEFT JOIN DR_RECIPE RR ON R.RECIPE_NUMBER = RR.RECIPE_NUMBER
        ORDER BY R.REPLY_WRITE_DATE DESC
    </select>

    <!-- 6-2. 댓글 삭제-->
    <delete id="replyDelete" parameterType="Integer">
        DELETE
        FROM DR_REPLY RE
        WHERE RE.REPLY_NUMBER = #{replyNumber}
    </delete>

    <!-- 6-3. 댓글 검색-->
    <select id="replySearch" parameterType="int" resultType="ManagerCommentDTO">
        select R.REPLY_NUMBER , R.REPLY_TEXT , U.USER_NICKNAME , U.USER_PHONE , R.REPLY_WRITE_DATE
        from DR_REPLY R
                 JOIN DR_USER U ON R.USER_NUMBER = U.USER_NUMBER
        WHERE
            R.REPLY_NUMBER = #{replyNumber}
    </select>

    <!-- 7-1. 포인트 관리-->
    <select id="showPoint" parameterType="ManagerPointDTO">
        SELECT
            P.POINT_NUMBER,
            U.USER_NICKNAME,
            U.USER_EMAIL,
            P.POINT_NOTE,
            P.POINT_GET,
            P.POINT_DATE,
            SUM(P.POINT_GET) OVER (PARTITION BY U.USER_NUMBER, U.USER_EMAIL) AS POINT_SUM
        FROM
            DR_POINT P
                JOIN
            DR_USER U ON P.USER_NUMBER = U.USER_NUMBER
        ORDER BY
            P.POINT_DATE DESC
    </select>

    <!-- 7-2. 포인트 삭제-->
    <delete id="pointDelete" parameterType="Integer">
        DELETE
        FROM DR_POINT P
        WHERE P.POINT_NUMBER = #{pointNumber}
    </delete>

    <!-- 7-3. 포인트 회수-->
    <update id="takePoint" parameterType="Integer">
        UPDATE DR_POINT
        SET POINT_GET = NULL
        WHERE POINT_NUMBER = #{pointNumber}
    </update>

    <!-- 7-4. 포인트 검색 -->
    <select id="pointSearch" parameterType="String" resultType="ManagerPointDTO">
        SELECT
            P.POINT_NUMBER,
            U.USER_NICKNAME,
            U.USER_EMAIL,
            P.POINT_NOTE,
            P.POINT_GET,
            P.POINT_DATE,
            SUM(P.POINT_GET) OVER (PARTITION BY U.USER_NUMBER, U.USER_EMAIL) AS POINT_SUM
        FROM
            DR_POINT P
                JOIN
            DR_USER U ON P.USER_NUMBER = U.USER_NUMBER
        WHERE
            U.USER_NICKNAME = #{userNickName}
        ORDER BY
            P.POINT_DATE DESC
    </select>

    <!-- 8-1. 신고 관리-->
    <select id="showReport" parameterType="ManagerReportDTO">
        SELECT
            S.SIREN_NUMBER,
            COALESCE(S.BOARD_NUMBER, S.RECIPE_NUMBER, S.REPLY_NUMBER) AS TARGET_ID,
            U.USER_NICKNAME,
            U.USER_EMAIL,
            S.SIREN_REASON,
            S.SIREN_TYPE,
            S.SIREN_DATE
        FROM
            DR_SIREN S
                JOIN DR_USER U ON S.USER_NUMBER = U.USER_NUMBER
                LEFT JOIN DR_BOARD B ON S.BOARD_NUMBER = B.BOARD_NUMBER
                LEFT JOIN DR_RECIPE R ON S.RECIPE_NUMBER = R.RECIPE_NUMBER
                LEFT JOIN DR_REPLY RE ON S.REPLY_NUMBER = RE.REPLY_NUMBER
        ORDER BY
            S.SIREN_DATE
    </select>




    <!-- 8-2. 신고 삭제-->
    <delete id="reportDelete" parameterType="Integer">
        DELETE
        FROM DR_SIREN S
        WHERE S.SIREN_NUMBER = #{sirenNumber}
    </delete>

    <!-- 9-1. 상품관리-->
    <select id="showProduct" parameterType="ManagerProductDTO">
        SELECT
            P.PRODUCT_NAME,
            P.PRODUCT_PRICE,
            COUNT(*) AS PRODUCT_COUNT

        FROM
            DR_PRODUCT P
        GROUP BY
            P.PRODUCT_NAME,
            P.PRODUCT_PRICE
        ORDER BY
            P.PRODUCT_NAME
    </select>

    <!-- 9-2. 상품삭제-->
    <delete id="productDelete" parameterType="String">
        DELETE
        FROM DR_PRODUCT P
        WHERE P.PRODUCT_NAME= #{productName}
    </delete>

    <!-- 9-3. 상품 등록 -->
    <insert id="registerProduct" parameterType="ManagerRegisterDTO">
        <selectKey keyProperty="productNumber" resultType="int" order="BEFORE">
            SELECT SEQ_PRODUCT_NUMBER.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO DR_PRODUCT (PRODUCT_NUMBER, PRODUCT_NAME, PRODUCT_CODE, PRODUCT_PRICE)
        VALUES (#{productNumber}, #{productName}, #{productCode}, #{productPrice})
    </insert>

    <!-- 9-3. 상품 사진 -->
    <insert id="registerPhoto" parameterType="ManagerPhotoDTO">
        <selectKey keyProperty="photoNumber" resultType="int" order="BEFORE">
            SELECT SEQ_PHOTO_NUMBER.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO DR_PHOTO (PHOTO_NUMBER, PHOTO_ORIGINAL, PHOTO_LOCAL, PHOTO_SIZE, PHOTO_UPLOAD, PRODUCT_NUMBER)
        VALUES (#{photoNumber}, #{photoOriginal}, #{photoLocal}, #{photoSize}, TO_DATE(#{photoUpload}, 'YYYY-MM-DD HH24:MI:SS'), #{productNumber})
    </insert>



    <!-- 9-4. 상품 수정 페이징 이동 -->
    <select id="updateShow" parameterType="String" resultType="ManagerRegisterDTO">
        SELECT P.PRODUCT_NAME , P.PRODUCT_PRICE , PP.PHOTO_LOCAL
        FROM DR_PRODUCT P
                 JOIN DR_PHOTO PP ON P.PRODUCT_NUMBER = PP.PRODUCT_NUMBER
        WHERE P.PRODUCT_NAME = #{productName}
          AND ROWNUM = 1
    </select>

    <!-- 9-4. 상품 수정 -->
    <insert id="productUpdate" parameterType="ManagerRegisterDTO">
        <selectKey keyProperty="productNumber" resultType="int" order="BEFORE">
            SELECT SEQ_PRODUCT_NUMBER.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO DR_PRODUCT (PRODUCT_NUMBER , PRODUCT_NAME , PRODUCT_CODE , PRODUCT_PRICE)
        VALUES (#{productNumber}, #{productName}, #{productCode}, #{productPrice})
    </insert>






</mapper>
